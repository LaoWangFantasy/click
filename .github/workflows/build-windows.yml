name: build-windows

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  WINDOWS_PFX_PASSWD: ${{ secrets.WINDOWS_PFX_PASSWD }}
  PUBSPEC: "pubspec.yaml"
  TARGET: "windows"
  RELEASE: "build/windows/x64/runner/Release"

permissions:
  contents: write

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["ci"]
    types:
      - completed
  push:
    branches:
      - "master"
    paths:
      - ".github/workflows/build-windows.yml"

jobs:
  pre:
    runs-on: ubuntu-24.04
    outputs:
      pubspec: ${{ env.PUBSPEC }}
      target: ${{ env.TARGET }}
      release: ${{ env.RELEASE }}
      pfx: ${{ env.WINDOWS_PFX_PASSWD }}
    steps:
      - run: echo "Bypass GitHub Action Restriction"

  pkcs12:
    needs:
      - pre
    uses: LaoWangFantasy/Flutter-Actions/.github/workflows/create-pfx.yml@master
    with:
      pkcs12-secret: ${{ needs.pre.outputs.pfx }}

  ready:
    needs:
      - pre
    uses: LaoWangFantasy/Flutter-Actions/.github/workflows/get-version.yml@master
    with:
      pub_path: ${{ needs.pre.outputs.pubspec }}

  build-windows-legacy:
    runs-on: windows-2019
    needs:
      - pre
      - ready
      - pkcs12
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
      -
        run: choco install yq
      -
        run: flutter --version
      -
        run: flutter pub get
      -
        run: flutter test
      -
        run: flutter build windows
      -
        run: |
          $repoName = $Env:GITHUB_REPOSITORY -replace '^.+/', ''
          $prefix = "${{ needs.pre.outputs.release }}"
          $pfxBase64 = "${{ needs.pkcs12.outputs.pfx-base64 }}"
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool"

          cd $signtool
          [IO.File]::WriteAllBytes('signingCert.pfx', [Convert]::FromBase64String("$pfxBase64"))
          signtool sign /a /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /f "signingCert.pfx" /p "${{ secrets.WINDOWS_PFX_PASSWD }}" $pfxBase64/$repoName.exe
        shell: pwsh
      -
        run: |
          $repoName = $Env:GITHUB_REPOSITORY -replace '^.+/', ''
          $prefix = "${{ needs.pre.outputs.release }}"
          $bin = "$repoName-${{ needs.ready.outputs.version }}-${{ needs.pre.outputs.target }}-legacy.zip"

          cd (Split-Path -Path $prefix -Parent)
          Move-Item -Path "Release" -Destination "$repoName"
          Compress-Archive -Path "$repoName" -DestinationPath $bin -CompressionLevel Optimal
          gh release upload ${{ needs.ready.outputs.version }} $bin --clobber
        shell: pwsh
        name: Upload(windows-legacy)

  build-windows:
    runs-on: windows-latest
    needs:
      - pre
      - ready
      - pkcs12
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
      -
        run: flutter --version
      -
        run: flutter pub get
      -
        run: flutter test
      -
        run: flutter build windows
      -
        run: |
          $repoName = $Env:GITHUB_REPOSITORY -replace '^.+/', ''
          $prefix = "${{ needs.pre.outputs.release }}"
          $pfxBase64 = "${{ needs.pkcs12.outputs.pfx-base64 }}"
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"

          cd $prefix
          [IO.File]::WriteAllBytes('signingCert.pfx', [Convert]::FromBase64String("$pfxBase64"))
          $signtool sign /a /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /f "signingCert.pfx" /p "${{ secrets.WINDOWS_PFX_PASSWD }}" $repoName.exe
        shell: pwsh
      -
        run: |
          $repoName = $Env:GITHUB_REPOSITORY -replace '^.+/', ''
          $prefix = "${{ needs.pre.outputs.release }}"
          $bin = "$repoName-${{ needs.ready.outputs.version }}-${{ needs.pre.outputs.target }}-legacy.zip"

          cd (Split-Path -Path $prefix -Parent)
          Move-Item -Path "Release" -Destination "$repoName"
          Compress-Archive -Path "$repoName" -DestinationPath $bin -CompressionLevel Optimal
          gh release upload ${{ needs.ready.outputs.version }} $bin --clobber
        shell: pwsh
        name: Upload(windows)